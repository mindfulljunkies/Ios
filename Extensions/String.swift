//
//  String.swift
//  AQUA
//
//  Created by Krishna on 21/03/17.
//  Copyright Â© 2017 MindfulSas. All rights reserved.
//

import Foundation
import UIKit


extension String{
    
    //MARK:Length of String
    var length :Int{
        return (self as NSString).length
    }
    
    var isValidEmail: Bool {
        let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}"
        let emailTest = NSPredicate(format:"SELF MATCHES %@", emailRegEx)
        return emailTest.evaluate(with: self)
    }
    
    var isValidPhoneNumber: Bool {
        let PHONE_REGEX = "^\\d{3}-\\d{3}-\\d{4}$"
        let phoneTest = NSPredicate(format: "SELF MATCHES %@", PHONE_REGEX)
        let result =  phoneTest.evaluate(with: self)
        return result
    }
  
  func dropLast(_ n: Int = 1) -> String {
    return String(characters.dropLast(n))
  }
  var dropLast: String {
    return dropLast()
  }
  
    //MARK: Making first letter lower of String
    var camelCase:String{
        var result = self
         result.replaceSubrange(self.startIndex...self.startIndex, with: String(self[self.startIndex]).lowercased())
        //result.replaceSubrange(1...1, with: String(self[startIndex]).lowercased())
        return result
    }
    
    //MARK:Making First letter capital of Name
    var toProper:String {
        let result = self
        return (result.capitalized(with: NSLocale.current))
    }
    
    //MARK:Making First letter capital of Name
    var makeFirstLetterCapital:String {
        var result = lowercased()
        result.replaceSubrange(self.startIndex...self.startIndex, with: String(self[startIndex]).capitalized)
        return result
    }

    
    //MARK:Localising String
    var localized: String {
        return NSLocalizedString(self, tableName: nil, bundle: Bundle.main, value: "", comment: "")
    }
    
    //MARK:JSONStringToDate
    var jsonStringToDate:NSDate {
        let dateFormatter = DateFormatter()
        dateFormatter.timeZone = NSTimeZone(name: "UTC") as TimeZone!
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        let utcDate = dateFormatter.date(from: self)
        return utcDate! as NSDate
    }
    
    
    //MARK:StringToDate Extensions
    var dateStringToUTCString:String {
        let dateFormatter = DateFormatter()
        dateFormatter.timeZone = NSTimeZone(name: "UTC") as TimeZone!
        dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss ZZZ"
        let utcDate = dateFormatter.date(from: self)
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        let utcString = dateFormatter.string(from: utcDate!)
        return utcString
    }
    
    
    var utcStringToSmartDate2:String {
        
        let dateFormatter =  DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        let date1 = dateFormatter.date(from: self)
        // return the timeZone of your device i.e. America/Los_angeles
        let timeZone = TimeZone.autoupdatingCurrent.identifier as String
        dateFormatter.timeZone = TimeZone(identifier: timeZone)
        
        dateFormatter.dateFormat = "dd MM, yyyy"
        let localDateTimeString = dateFormatter.string(from: date1!)
        return localDateTimeString
    }
    
    
    var graphStyleDate:String{
        let dateFormatter =  DateFormatter()
        dateFormatter.dateFormat = "dd MM, yyyy"
        let date = dateFormatter.date(from: self)
        print(date!)
        let timeZone = TimeZone.autoupdatingCurrent.identifier as String
        dateFormatter.timeZone = TimeZone(identifier: timeZone)
        
        dateFormatter.dateFormat = "d MMM"
        let dayName = dateFormatter.string(from: date!)
        
        return(dayName)
        
    }
    
  
 var convertNextDate: String{
    let dateFormatter = DateFormatter()
    dateFormatter.dateFormat = "MM-dd-yyyy"
    let myDate = dateFormatter.date(from: self)!
    let tomorrow = Calendar.current.date(byAdding: .day, value: 1, to: myDate)
    let somedateString = dateFormatter.string(from: tomorrow!)
    print("your next Date is \(somedateString)")
  return somedateString
  }
  
  var commondateStringToUTCString:String {
    let dateFormatter = DateFormatter()
    dateFormatter.timeZone = NSTimeZone(name: "UTC") as TimeZone!
    dateFormatter.dateFormat = "dd MMMM, yyyy"
    let utcDate = dateFormatter.date(from: self)
    dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
    let utcString = dateFormatter.string(from: utcDate!)
    return utcString
  }
  
    var utcStringToDateString:String {
        let dateFormatter = DateFormatter()
        dateFormatter.timeZone = NSTimeZone.local
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        let localDate = dateFormatter.date(from: self)
        dateFormatter.dateFormat = "yyyy-MM-dd, h:mm a"
        let localDateString = dateFormatter.string(from: localDate!)
        return localDateString
    }
    
//    var utcStringToSmartDate:String {
//        let dateFormatter = DateFormatter()
//        dateFormatter.timeZone = NSTimeZone.local
//        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
//        let localDate = dateFormatter.date(from: self)
//        let currentDate = NSDate()
//        //dateFormatter.dateFormat = "MMM-dd-yyyy"
//        dateFormatter.dateFormat = "d MMMM, yyyy"
//        
//        let dateString = dateFormatter.string(from: localDate!)
//        return dateString
//    }
    
    var utcStringToSmartDate:String {
        
        let dateFormatter =  DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        let date1 = dateFormatter.date(from: self)
        // return the timeZone of your device i.e. America/Los_angeles
        let timeZone = TimeZone.autoupdatingCurrent.identifier as String
        dateFormatter.timeZone = TimeZone(identifier: timeZone)
        
        dateFormatter.dateFormat = "d MMMM, yyyy"
        let localDateTimeString = dateFormatter.string(from: date1!)
        return localDateTimeString
        
    }
  
  var floatValue: Float {
    return (self as NSString).floatValue
  }
  
 
    
    var utcStringToLocalDateTime:String {
        
        let dateFormatter =  DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        dateFormatter.amSymbol = "AM"
        dateFormatter.pmSymbol = "PM"
        let date1 = dateFormatter.date(from: self)
        // return the timeZone of your device i.e. America/Los_angeles
        let timeZone = TimeZone.autoupdatingCurrent.identifier as String
        dateFormatter.timeZone = TimeZone(identifier: timeZone)
        
        dateFormatter.dateFormat = "h:mm a"
        let localDateTimeString = dateFormatter.string(from: date1!)
        return localDateTimeString
        
    }
  
  var clipTitle:String {
    var clipedName = self
    if clipedName.characters.count > 18{
    if let range = clipedName.range(of: " ") {
      let firstPart = clipedName[clipedName.startIndex..<range.lowerBound]
        clipedName = String(firstPart)
    }
    }
    return clipedName
  }

  
    var utcStringToTimeDifference:String {
        
        let dateFormatter =  DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        dateFormatter.amSymbol = "AM"
        dateFormatter.pmSymbol = "PM"
        let date1 = dateFormatter.date(from: self)
        // return the timeZone of your device i.e. America/Los_angeles
        let timeZone = TimeZone.autoupdatingCurrent.identifier as String
        dateFormatter.timeZone = TimeZone(identifier: timeZone)
      var comp = Set<Calendar.Component>()
      comp.insert(.minute)
      //   let difference  = NSCalendar.current.dateComponents(, from: date, to: self)
      let myNewDate = Date()
      let difference  =   Calendar.current.dateComponents(comp, from:date1! , to: myNewDate).minute ?? 0
      
      let hours = difference / 60
      let min = difference % 60
      return "\(String(hours))h \(String(min))m"
        
    }
  
  func dateDifference(toDate: String) -> String {
    
    let dateFormatter =  DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
    dateFormatter.amSymbol = "AM"
    dateFormatter.pmSymbol = "PM"
    let date1 = dateFormatter.date(from: self)
    let date2  = dateFormatter.date(from: toDate)
    // return the timeZone of your device i.e. America/Los_angeles
    let timeZone = TimeZone.autoupdatingCurrent.identifier as String
    dateFormatter.timeZone = TimeZone(identifier: timeZone)
    var comp = Set<Calendar.Component>()
    comp.insert(.minute)
   
    let difference  =   Calendar.current.dateComponents(comp, from:date1! , to: date2!).minute ?? 0
    
    let hours = difference / 60
    let min = difference % 60
    return "\(String(hours))h \(String(min))m"
    
  }

  func workingHourDifference(workMinutes:Int ) -> String {
    
    let dateFormatter =  DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
    dateFormatter.amSymbol = "AM"
    dateFormatter.pmSymbol = "PM"
    let date1 = dateFormatter.date(from: self)
    // return the timeZone of your device i.e. America/Los_angeles
    let timeZone = TimeZone.autoupdatingCurrent.identifier as String
    dateFormatter.timeZone = TimeZone(identifier: timeZone)
    var comp = Set<Calendar.Component>()
    comp.insert(.minute)

    let myNewDate = Date()
    var difference  =   Calendar.current.dateComponents(comp, from:date1! , to: myNewDate).minute ?? 0
    difference = difference + workMinutes
    
    let hours = difference / 60
    let min = difference % 60
    return "\(String(hours))h \(String(min))m"
    
  }
  

  
  var utcStringToLocalDateTimeForNotification:String {
    
    let dateFormatter =  DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
    dateFormatter.amSymbol = "AM"
    dateFormatter.pmSymbol = "PM"
    let date1 = dateFormatter.date(from: self)
    // return the timeZone of your device i.e. America/Los_angeles
    let timeZone = TimeZone.autoupdatingCurrent.identifier as String
    dateFormatter.timeZone = TimeZone(identifier: timeZone)   
     dateFormatter.dateFormat = "d MMMM yyyy, h:mm a"
      let localDateTimeString = dateFormatter.string(from: date1!)
      return localDateTimeString
    
  }
  
  var httpsExtend:String{
    if self.contains("https") == true{
      return self
    }
    let newString = self.replacingOccurrences(of: "http", with: "https", options: .literal, range: nil)
    return newString
  }


  
    var utcStringToMonthName:String{
      
        let dateFormatter =  DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        let date = dateFormatter.date(from: self)
        print(date!)
        let timeZone = TimeZone.autoupdatingCurrent.identifier as String
        dateFormatter.timeZone = TimeZone(identifier: timeZone)

        dateFormatter.dateFormat = "MMM"
        let monthName = dateFormatter.string(from: date!)
        
        return(monthName)

    }
    
    var utcStringToDayName:String{
        let dateFormatter =  DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        let date = dateFormatter.date(from: self)
        print(date!)
        let timeZone = TimeZone.autoupdatingCurrent.identifier as String
        dateFormatter.timeZone = TimeZone(identifier: timeZone)
        
        dateFormatter.dateFormat = "EEE"
        let dayName = dateFormatter.string(from: date!)
        
        return(dayName)
        
    }
  
  
  var utcStringToFullDayName:String{
    let dateFormatter =  DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
    let date = dateFormatter.date(from: self)
    print(date!)
    let timeZone = TimeZone.autoupdatingCurrent.identifier as String
    dateFormatter.timeZone = TimeZone(identifier: timeZone)
    
    dateFormatter.dateFormat = "EEEE"
    let dayName = dateFormatter.string(from: date!)
    
    return(dayName)
    
  }

  
  var utcStringToShortDate:String{
    let dateFormatter =  DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
    let date = dateFormatter.date(from: self)
    print(date!)
    let timeZone = TimeZone.autoupdatingCurrent.identifier as String
    dateFormatter.timeZone = TimeZone(identifier: timeZone)
    
    dateFormatter.dateFormat = "MMM d"
    let dayName = dateFormatter.string(from: date!)
    
    return(dayName)
    
  }
  
  var shortStyleDate:String{
    let dateFormatter =  DateFormatter()
    dateFormatter.dateFormat = "d MMMM, yyyy"
    let date = dateFormatter.date(from: self)
    print(date!)
    let timeZone = TimeZone.autoupdatingCurrent.identifier as String
    dateFormatter.timeZone = TimeZone(identifier: timeZone)
    
    dateFormatter.dateFormat = "d MMM,"
    let dayName = dateFormatter.string(from: date!)
    
    return(dayName)
    
  }


    var subStringfromUTCStrnig:String {
      
        let c = self.characters
        let r = c.index(c.startIndex, offsetBy: 11)..<c.index(c.endIndex, offsetBy: -12)
        
        // Access the string by the range.
        let substring = self[r]
        return String(substring)
        
        
    }
  
  func dateTimeToTodayTime() -> String{
    let dateFormatter =  DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
    let dateUtc = dateFormatter.string(from: Date())
    var myDateArr = dateUtc.components(separatedBy: "T")
    var compDateArr = self.components(separatedBy: "T")
    let newDate = myDateArr[0] + "T" + compDateArr[1]
    
    return newDate
    
  }
    
    
    var dateFromUTCString:String {
        let dateFormatter =  DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        let date1 = dateFormatter.date(from: self)
        // return the timeZone of your device i.e. America/Los_angelesdate
        let timeZone = TimeZone.autoupdatingCurrent.identifier as String
        dateFormatter.timeZone = TimeZone(identifier: timeZone)
        
        dateFormatter.dateFormat = "dd"
        let localDateString = dateFormatter.string(from: date1!)
        return localDateString

        
//        let c = self.characters
//        let r = c.index(c.startIndex, offsetBy: 8)..<c.index(c.endIndex, offsetBy: -14)
//        
//        // Access the string by the range.
//        let substring = self[r]
//        return substring
        
        
    }
    
    var orderDate:String {
        let dateFormatter =  DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        let date1 = dateFormatter.date(from: self)
        // return the timeZone of your device i.e. America/Los_angelesdate
        let timeZone = TimeZone.autoupdatingCurrent.identifier as String
        dateFormatter.timeZone = TimeZone(identifier: timeZone)
        
        dateFormatter.dateFormat = "MMM dd,h:mm a"
        let localDateString = dateFormatter.string(from: date1!)
        return localDateString
        
        
        //        let c = self.characters
        //        let r = c.index(c.startIndex, offsetBy: 8)..<c.index(c.endIndex, offsetBy: -14)
        //
        //        // Access the string by the range.
        //        let substring = self[r]
        //        return substring
        
        
    }
    
    var orderDate1:String {
        let dateFormatter =  DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        let date1 = dateFormatter.date(from: self)
        // return the timeZone of your device i.e. America/Los_angelesdate
        let timeZone = TimeZone.autoupdatingCurrent.identifier as String
        dateFormatter.timeZone = TimeZone(identifier: timeZone)
        
        dateFormatter.dateFormat = "yyyy MMM dd"
        let localDateString = dateFormatter.string(from: date1!)
        return localDateString
        
        
        //        let c = self.characters
        //        let r = c.index(c.startIndex, offsetBy: 8)..<c.index(c.endIndex, offsetBy: -14)
        //
        //        // Access the string by the range.
        //        let substring = self[r]
        //        return substring
        
        
    }

    
    var orderDate2:String {
        let dateFormatter =  DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        let date1 = dateFormatter.date(from: self)
        // return the timeZone of your device i.e. America/Los_angelesdate
        let timeZone = TimeZone.autoupdatingCurrent.identifier as String
        dateFormatter.timeZone = TimeZone(identifier: timeZone)
        
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        let localDateString = dateFormatter.string(from: date1!)
        return localDateString
        
        
    }


    var html: String {
        
        get {
            //"&":"&amp;", add it for & operation
            
            let enc:  [Character:String] = ["â":"%20","^":"%5E", "â":"&ensp;", " ":"%20", "â":"&thinsp;", "â¾":"&oline;", "â":"&ndash;", "â":"&mdash;", "Â¡":"&iexcl;", "Â¿":"&iquest;", "â¦":"&hellip;", "Â·":"&middot;", "'":"&apos;", "â":"&lsquo;", "â":"&rsquo;", "â":"&sbquo;", "â¹":"&lsaquo;", "âº":"&rsaquo;", "â":"&lrm;", "â":"&rlm;", "Â­":"&shy;", "â":"&zwj;", "â":"&zwnj;", "\"":"&quot;", "â":"&ldquo;", "â":"&rdquo;", "â":"&bdquo;", "Â«":"&laquo;", "Â»":"&raquo;", "â":"&lceil;", "â":"&rceil;", "â":"&lfloor;", "â":"&rfloor;", "â©":"&lang;", "âª":"&rang;", "Â§":"&sect;", "Â¶":"&para;", "â°":"&permil;", "â ":"&dagger;", "â¡":"&Dagger;", "â¢":"&bull;", "â²":"&prime;", "â³":"&Prime;", "Â´":"&acute;", "Ë":"&tilde;", "Â¯":"&macr;", "Â¨":"&uml;", "Â¸":"&cedil;", "Ë":"&circ;", "Â°":"&deg;", "Â©":"&copy;", "Â®":"&reg;", "â":"&weierp;", "â":"&larr;", "â":"&rarr;", "â":"&uarr;", "â":"&darr;", "â":"&harr;", "âµ":"&crarr;", "â":"&lArr;", "â":"&uArr;", "â":"&rArr;", "â":"&dArr;", "â":"&hArr;", "â":"&forall;", "â":"&part;", "â":"&exist;", "â":"&empty;", "â":"&nabla;", "â":"&isin;", "â":"&notin;", "â":"&ni;", "â":"&prod;", "â":"&sum;", "Â±":"&plusmn;", "Ã·":"&divide;", "Ã":"&times;", "<":"&lt;", "â ":"&ne;", ">":"&gt;", "Â¬":"&not;", "Â¦":"&brvbar;", "â":"&minus;", "â":"&frasl;", "â":"&lowast;", "â":"&radic;", "â":"&prop;", "â":"&infin;", "â ":"&ang;", "â§":"&and;", "â¨":"&or;", "â©":"&cap;", "âª":"&cup;", "â«":"&int;", "â´":"&there4;", "â¼":"&sim;", "â":"&cong;", "â":"&asymp;", "â¡":"&equiv;", "â¤":"&le;", "â¥":"&ge;", "â":"&nsub;", "â":"&sub;", "â":"&sup;", "â":"&sube;", "â":"&supe;", "â":"&oplus;", "â":"&otimes;", "â¥":"&perp;", "â":"&sdot;", "â":"&loz;", "â ":"&spades;", "â£":"&clubs;", "â¥":"&hearts;", "â¦":"&diams;", "Â¤":"&curren;", "Â¢":"&cent;", "Â£":"&pound;", "Â¥":"&yen;", "â¬":"&euro;", "Â¹":"&sup1;", "Â½":"&frac12;", "Â¼":"&frac14;", "Â²":"&sup2;", "Â³":"&sup3;", "Â¾":"&frac34;", "Ã¡":"&aacute;", "Ã":"&Aacute;", "Ã¢":"&acirc;", "Ã":"&Acirc;", "Ã ":"&agrave;", "Ã":"&Agrave;", "Ã¥":"&aring;", "Ã":"&Aring;", "Ã£":"&atilde;", "Ã":"&Atilde;", "Ã¤":"&auml;", "Ã":"&Auml;", "Âª":"&ordf;", "Ã¦":"&aelig;", "Ã":"&AElig;", "Ã§":"&ccedil;", "Ã":"&Ccedil;", "Ã°":"&eth;", "Ã":"&ETH;", "Ã©":"&eacute;", "Ã":"&Eacute;", "Ãª":"&ecirc;", "Ã":"&Ecirc;", "Ã¨":"&egrave;", "Ã":"&Egrave;", "Ã«":"&euml;", "Ã":"&Euml;", "Æ":"&fnof;", "Ã­":"&iacute;", "Ã":"&Iacute;", "Ã®":"&icirc;", "Ã":"&Icirc;", "Ã¬":"&igrave;", "Ã":"&Igrave;", "â":"&image;", "Ã¯":"&iuml;", "Ã":"&Iuml;", "Ã±":"&ntilde;", "Ã":"&Ntilde;", "Ã³":"&oacute;", "Ã":"&Oacute;", "Ã´":"&ocirc;", "Ã":"&Ocirc;", "Ã²":"&ograve;", "Ã":"&Ograve;", "Âº":"&ordm;", "Ã¸":"&oslash;", "Ã":"&Oslash;", "Ãµ":"&otilde;", "Ã":"&Otilde;", "Ã¶":"&ouml;", "Ã":"&Ouml;", "Å":"&oelig;", "Å":"&OElig;", "â":"&real;", "Å¡":"&scaron;", "Å ":"&Scaron;", "Ã":"&szlig;", "â¢":"&trade;", "Ãº":"&uacute;", "Ã":"&Uacute;", "Ã»":"&ucirc;", "Ã":"&Ucirc;", "Ã¹":"&ugrave;", "Ã":"&Ugrave;", "Ã¼":"&uuml;", "Ã":"&Uuml;", "Ã½":"&yacute;", "Ã":"&Yacute;", "Ã¿":"&yuml;", "Å¸":"&Yuml;", "Ã¾":"&thorn;", "Ã":"&THORN;", "Î±":"&alpha;", "Î":"&Alpha;", "Î²":"&beta;", "Î":"&Beta;", "Î³":"&gamma;", "Î":"&Gamma;", "Î´":"&delta;", "Î":"&Delta;", "Îµ":"&epsilon;", "Î":"&Epsilon;", "Î¶":"&zeta;", "Î":"&Zeta;", "Î·":"&eta;", "Î":"&Eta;", "Î¸":"&theta;", "Î":"&Theta;", "Ï":"&thetasym;", "Î¹":"&iota;", "Î":"&Iota;", "Îº":"&kappa;", "Î":"&Kappa;", "Î»":"&lambda;", "Î":"&Lambda;", "Âµ":"&micro;", "Î¼":"&mu;", "Î":"&Mu;", "Î½":"&nu;", "Î":"&Nu;", "Î¾":"&xi;", "Î":"&Xi;", "Î¿":"&omicron;", "Î":"&Omicron;", "Ï":"&pi;", "Î ":"&Pi;", "Ï":"&piv;", "Ï":"&rho;", "Î¡":"&Rho;", "Ï":"&sigma;", "Î£":"&Sigma;", "Ï":"&sigmaf;", "Ï":"&tau;", "Î¤":"&Tau;", "Ï":"&upsih;", "Ï":"&upsilon;", "Î¥":"&Upsilon;", "Ï":"&phi;", "Î¦":"&Phi;", "Ï":"&chi;", "Î§":"&Chi;", "Ï":"&psi;", "Î¨":"&Psi;", "Ï":"&omega;", "Î©":"&Omega;", "âµ":"&alefsym;"]
            
            var html = ""
            for c in self.characters {
                if let entity = enc[c] {
                    html.append(entity)
                } else {
                    html.append(c)
                }
            }
            return html
        }
    }
    
}


extension NSMutableAttributedString {
  
  func setColorForText(textForAttribute: String, withColor color: UIColor) {
    let range: NSRange = self.mutableString.range(of: textForAttribute, options: .caseInsensitive)
    
    // Swift 4.1 and below
    self.addAttribute(NSAttributedString.Key.foregroundColor, value: color, range: range)
  }
  
}
